spring:
  datasource:
    url: jdbc:mysql://${TEST_MYSQL_HOST_MASTER1}:${TEST_MYSQL_PORT}/${TEST_MYSQL_DATABASE}?useUnicode=true&characterEncoding=UTF-8&useSSL=false&serverTimezone=Asia/Shanghai
    username: ${TEST_MYSQL_USERNAME}
    password: ${TEST_MYSQL_PASSWORD}
    driver-class-name: com.mysql.cj.jdbc.Driver

    dynamic:
      primary: master # 指定动态数据源的默认主库为 'master'
      strict: false
      datasource:
        master: # 动态数据源中的主库 (写库)
          url: jdbc:mysql://${TEST_MYSQL_HOST_MASTER1}:${TEST_MYSQL_PORT}/${TEST_MYSQL_DATABASE}?useUnicode=true&characterEncoding=UTF-8&useSSL=false&serverTimezone=Asia/Shanghai
          username: ${TEST_MYSQL_USERNAME}
          password: ${TEST_MYSQL_PASSWORD}
          driver-class-name: com.mysql.cj.jdbc.Driver
          type: com.alibaba.druid.pool.DruidDataSource
        slave1: # 动态数据源中的从库1 (读库)
          url: jdbc:mysql://${TEST_MYSQL_HOST_SLAVE1}:${TEST_MYSQL_PORT}/${TEST_MYSQL_DATABASE}?useUnicode=true&characterEncoding=UTF-8&useSSL=false&serverTimezone=Asia/Shanghai
          username: ${TEST_MYSQL_USERNAME}
          password: ${TEST_MYSQL_PASSWORD}
          driver-class-name: com.mysql.cj.jdbc.Driver
          type: com.alibaba.druid.pool.DruidDataSource
        slave2: # 动态数据源中的从库2 (读库)
          url: jdbc:mysql://${TEST_MYSQL_HOST_SLAVE2}:${TEST_MYSQL_PORT}/${TEST_MYSQL_DATABASE}?useUnicode=true&characterEncoding=UTF-8&useSSL=false&serverTimezone=Asia/Shanghai
          username: ${TEST_MYSQL_USERNAME}
          password: ${TEST_MYSQL_PASSWORD}
          driver-class-name: com.mysql.cj.jdbc.Driver
          type: com.alibaba.druid.pool.DruidDataSource

  druid:
    stat-view-servlet:
      enabled: true
      login-username: admin
      login-password: admin
    filter:
      stat:
        log-slow-sql: true
        slow-sql-millis: 1000
        merge-sql: true

  flyway:
    # 注意：生产不应该使用createDatabaseIfNotExist，应该手动建，避免误建误删
    url: jdbc:mysql://${TEST_MYSQL_HOST_MASTER1}:${TEST_MYSQL_PORT}/${TEST_MYSQL_DATABASE}?createDatabaseIfNotExist=true&useUnicode=true&characterEncoding=UTF-8&useSSL=false&serverTimezone=Asia/Shanghai
    user: ${TEST_MYSQL_USERNAME}
    password: ${TEST_MYSQL_PASSWORD}

  jpa:
    show-sql: true

  data:
    redis:
      cluster:
        nodes:
          - ${TEST_REDIS_NODE1}
          - ${TEST_REDIS_NODE2}
          - ${TEST_REDIS_NODE3}
          - ${TEST_REDIS_NODE4}
          - ${TEST_REDIS_NODE5}
          - ${TEST_REDIS_NODE6}
      password: ${TEST_REDIS_PASSWORD:}
      timeout: ${TEST_REDIS_TIMEOUT:3000}
      lettuce:
        pool:
          max-active: ${TEST_REDIS_MAX_ACTIVE:8}
          max-idle: ${TEST_REDIS_MAX_IDLE:8}
          min-idle: ${TEST_REDIS_MIN_IDLE:0}
          max-wait: ${TEST_REDIS_MAX_WAIT:10000}


  rabbitmq:
    username: ${TEST_RABBITMQ_USERNAME}
    password: ${TEST_RABBITMQ_PASSWORD}
    addresses:
      - ${TEST_RABBITMQ_ADDRESS1}
      - ${TEST_RABBITMQ_ADDRESS2}
      - ${TEST_RABBITMQ_ADDRESS3}
    virtual-host: ${TEST_RABBITMQ_VIRTUAL_HOST}
    port: ${TEST_RABBITMQ_PORT}
    connection-timeout: ${TEST_RABBITMQ_CONNECTION_TIMEOUT}  # 连接超时（单位：毫秒）
    requested-heartbeat: ${TEST_RABBITMQ_REQUESTED_HEARTBEAT}    # 请求心跳间隔（单位：秒）
    erlang-cookie: ${TEST_RABBITMQ_ERLANG_COOKIE}

  jwt:
    secret: ${JWT_SECRET} # 生成/校验JWT令牌的密钥，由 .env 文件读取
    accessTokenExpiration: 300 # 5m 短期令牌时效
    refreshTokenExpiration: 604800 # 7d 长期令牌时效
stripe:
  secretKey: ${STRIPE_SECRET_KEY} # Stripe 商户账户的后端密钥（比如发起收款、查询订单、退款等）
  webhookSecretKey: ${STRIPE_WEBHOOK_SECRET_KEY} # 校验 Stripe 回调请求的真实性，本地测试时无法收到毁掉，需要进测试环境


websiteUrl: http://
swagger:
  server-url: http://47.111.2.191:8080
